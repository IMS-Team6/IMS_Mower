// generated by mBlock5 for mBot Ranger
// codes make you happy

#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include <MeAuriga.h>

MeLineFollower linefollower_9(9);
MeUltrasonicSensor ultrasonic_10(10);
MeEncoderOnBoard Encoder_1(SLOT1);
MeEncoderOnBoard Encoder_2(SLOT2);
MeLightSensor lightsensor_12(12);
MeGyro gyro_0(0, 0x69);

//Maximum distance allowed between robot and obstacle.
int distanceToObstacle = 10;
//Defines which state the robot is in, should make an enum to be more clear.
int state;

void isr_process_encoder1(void)
{
  if(digitalRead(Encoder_1.getPortB()) == 0){
    Encoder_1.pulsePosMinus();
  }else{
    Encoder_1.pulsePosPlus();
  }
}
void isr_process_encoder2(void)
{
  if(digitalRead(Encoder_2.getPortB()) == 0){
    Encoder_2.pulsePosMinus();
  }else{
    Encoder_2.pulsePosPlus();
  }
}
void move(int direction, int speed)
{
  int leftSpeed = 0;
  int rightSpeed = 0;
  if(direction == 1){
    leftSpeed = -speed;
    rightSpeed = speed;
  }else if(direction == 2){
    leftSpeed = speed;
    rightSpeed = -speed;
  }else if(direction == 3){
    leftSpeed = -speed;
    rightSpeed = -speed;
  }else if(direction == 4){
    leftSpeed = speed;
    rightSpeed = speed;
  }
  Encoder_1.setTarPWM(leftSpeed);
  Encoder_2.setTarPWM(rightSpeed);
}

void moveForward(int dutyCycle){
  Encoder_1.setTarPWM(-dutyCycle / 100.0 * 255);
  Encoder_2.setTarPWM(dutyCycle / 100.0 * 255);
}

void stopMotors(){
  Encoder_1.setTarPWM(0);
  Encoder_2.setTarPWM(0);
}

void changeDirection(){
  /*
  Does this reset the gyro? Could eliminate the drift between measurement. 
  Direction is "stored" by the app anyways, send change from last direction not the initial one.
  */
  gyro_0.begin();
  
  move(4, 50 / 100.0 * 255);
  _delay(1);
  move(4, 0);
}

String getOrientation(){
  gyro_0.update();
  double angle = gyro_0.getAngle(3);
  if(angle < 0){
    angle += 360;
  }
  return String(angle);
}

int checkSensors(){
  if(ultrasonic_10.distanceCm() <= distanceToObstacle){
    return 2;
  }else if(linefollower_9.readSensors()!=3){    //0?(0==0?linefollower_9.readSensors()==0:(linefollower_9.readSensors() & 0)==0):(0==0?linefollower_9.readSensors()==3:(linefollower_9.readSensors() & 0)==0)
    return 3;
  }else{
    return 1;
  }
}

void receiveAck(){
  while(1){
    if(Serial.available() > 0){
      String data = Serial.readStringUntil('\n');
      break;
    }
  }
}

int autonomousDriving(int state){
  switch(state){
    case 0:
      //Start motors...
      moveForward(40);
      Serial.println("Run");
      //receiveAck();
      state = 1;
      break;
    case 1:
      //Just driving forward....h
      state = checkSensors();
      break;
    case 2:
      //Found obstacle....
      stopMotors();
      Serial.println("Obstacle encountered.");
      _delay(1);
      //receiveAck();
      state = 4;
      break;
    case 3:
      //Out of bounds
      stopMotors();
      Serial.println("Out of Bounds");
      //receiveAck();
      _delay(1);
      state = 4;
      break;
    case 4:
      //Turn...
      changeDirection();
      Serial.println("Turn " + getOrientation());
      //receiveAck();
      state = 0;
    default:
      //SHOULD NOT GET HERE!!!
      break;
  }
  return state;
}

void _delay(float seconds) {
  if(seconds < 0.0){
    seconds = 0.0;
  }
  long endTime = millis() + seconds * 1000;
  while(millis() < endTime) _loop();
}

void setup() {
  TCCR1A = _BV(WGM10);
  TCCR1B = _BV(CS11) | _BV(WGM12);
  TCCR2A = _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS21);
  attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);
  attachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);
  gyro_0.begin();
  Serial.begin(9600);
  randomSeed((unsigned long)(lightsensor_12.read() * 123456));
  state = 0;
  _delay(3);
}

void _loop() {
  Encoder_1.loop();
  Encoder_2.loop();
}

void loop() {
  state = autonomousDriving(state);
  _loop();
}
